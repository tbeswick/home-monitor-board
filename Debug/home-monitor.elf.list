
home-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002384  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  080025a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00000944  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200009c8  200009c8  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000648e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000147a  00000000  00000000  00026542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006e0  00000000  00000000  000279c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000608  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002872  00000000  00000000  000286a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002587  00000000  00000000  0002af1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002d4a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d5c  00000000  00000000  0002d520  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f27c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024f4 	.word	0x080024f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080024f4 	.word	0x080024f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <RunWifiCommand>:




WIFI_RSP RunWifiCommand(char* cmd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	wifi_con->new_response = 0;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <RunWifiCommand+0x3c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	wifi_con->rx_index = 0;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <RunWifiCommand+0x3c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	SendAT(cmd);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f80f 	bl	8000a9c <SendAT>
	while(wifi_con->new_response == 0);
 8000a7e:	bf00      	nop
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <RunWifiCommand+0x3c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f9      	beq.n	8000a80 <RunWifiCommand+0x24>

	return RSP_OK;
 8000a8c:	2300      	movs	r3, #0

}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000b0 	.word	0x200000b0

08000a9c <SendAT>:


void SendAT(char* str)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]


	while (*str) {
 8000aa4:	e011      	b.n	8000aca <SendAT+0x2e>
		while( !(USART2->SR & 0x00000040) );
 8000aa6:	bf00      	nop
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <SendAT+0x40>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f8      	beq.n	8000aa8 <SendAT+0xc>
		USART_SendData(USART2,(uint16_t)*str);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <SendAT+0x40>)
 8000ac0:	f000 ff84 	bl	80019cc <USART_SendData>
		/* Increase string pointer */
		str++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]

void SendAT(char* str)
{


	while (*str) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1e9      	bne.n	8000aa6 <SendAT+0xa>
		str++;
	}



}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400

08000ae0 <ConfigureWifiUsart>:

}


void ConfigureWifiUsart(uint32_t baudrate)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]


	wifi_con = (WIFI_AT*)malloc(sizeof(WIFI_AT));
 8000ae8:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8000aec:	f001 fc30 	bl	8002350 <malloc>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <ConfigureWifiUsart+0xd4>)
 8000af6:	601a      	str	r2, [r3, #0]
	wifi_con->rx_index = 0;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <ConfigureWifiUsart+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	wifi_con->new_response = 0;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <ConfigureWifiUsart+0xd4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	//enable the clocks for the GPIOB and the USART
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b12:	f001 f8db 	bl	8001ccc <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 f8b7 	bl	8001c8c <RCC_AHB1PeriphClockCmd>

	//Initialise pins GPIOB 6 and GPIOB 7
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; //we are setting the pin to be alternative function
 8000b22:	2302      	movs	r3, #2
 8000b24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481d      	ldr	r0, [pc, #116]	; (8000bb8 <ConfigureWifiUsart+0xd8>)
 8000b42:	f001 f923 	bl	8001d8c <GPIO_Init>

	//Connect the TX and RX pins to their alternate function pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); //
 8000b46:	2207      	movs	r2, #7
 8000b48:	2102      	movs	r1, #2
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <ConfigureWifiUsart+0xd8>)
 8000b4c:	f001 f9ac 	bl	8001ea8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000b50:	2207      	movs	r2, #7
 8000b52:	2103      	movs	r1, #3
 8000b54:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <ConfigureWifiUsart+0xd8>)
 8000b56:	f001 f9a7 	bl	8001ea8 <GPIO_PinAFConfig>

	//configure USART
	USART_InitStruct.USART_BaudRate = baudrate;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000b66:	2300      	movs	r3, #0
 8000b68:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; //enable send and receive (Tx and Rx)
 8000b6e:	230c      	movs	r3, #12
 8000b70:	837b      	strh	r3, [r7, #26]
	USART_Init(USART2, &USART_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <ConfigureWifiUsart+0xdc>)
 8000b7a:	f000 fe4d 	bl	8001818 <USART_Init>

	//Enable the interupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f240 5125 	movw	r1, #1317	; 0x525
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <ConfigureWifiUsart+0xdc>)
 8000b86:	f000 ff33 	bl	80019f0 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000b8a:	2326      	movs	r3, #38	; 0x26
 8000b8c:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fb4e 	bl	8002240 <NVIC_Init>

	// finally this enables the complete USART2 peripheral
	USART_Cmd(USART2, ENABLE);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <ConfigureWifiUsart+0xdc>)
 8000ba8:	f000 fef0 	bl	800198c <USART_Cmd>
}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b0 	.word	0x200000b0
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <WiFiInit>:


void WiFiInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	RunWifiCommand("AT\r");
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <WiFiInit+0x2c>)
 8000bc6:	f7ff ff49 	bl	8000a5c <RunWifiCommand>
	DelayMs(40);
 8000bca:	2028      	movs	r0, #40	; 0x28
 8000bcc:	f000 f814 	bl	8000bf8 <DelayMs>
	RunWifiCommand("AT+CIPMUX=1\r");
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <WiFiInit+0x30>)
 8000bd2:	f7ff ff43 	bl	8000a5c <RunWifiCommand>
	DelayMs(40);
 8000bd6:	2028      	movs	r0, #40	; 0x28
 8000bd8:	f000 f80e 	bl	8000bf8 <DelayMs>
	RunWifiCommand("AT+CIFSR\r");
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <WiFiInit+0x34>)
 8000bde:	f7ff ff3d 	bl	8000a5c <RunWifiCommand>
	DelayMs(40);
 8000be2:	2028      	movs	r0, #40	; 0x28
 8000be4:	f000 f808 	bl	8000bf8 <DelayMs>

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	0800250c 	.word	0x0800250c
 8000bf0:	08002510 	.word	0x08002510
 8000bf4:	08002520 	.word	0x08002520

08000bf8 <DelayMs>:
#include <string.h>

extern uint32_t ms1;

void DelayMs(uint32_t ms)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	ms1 = 0;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <DelayMs+0x28>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
	while(ms1 < ms);
 8000c06:	bf00      	nop
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <DelayMs+0x28>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d3fa      	bcc.n	8000c08 <DelayMs+0x10>

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200000b4 	.word	0x200000b4

08000c24 <ConvertToDecimal>:


void ConvertToDecimal(char* res, float num)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	ed87 0a00 	vstr	s0, [r7]

	char tmp[10];



	int d1 = num;            // Get the integer part (678).
 8000c30:	edd7 7a00 	vldr	s15, [r7]
 8000c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c38:	ee17 3a90 	vmov	r3, s15
 8000c3c:	61fb      	str	r3, [r7, #28]
	float f2 = num - d1;     // Get fractional part (678.0123 - 678 = 0.0123).
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c48:	ed97 7a00 	vldr	s14, [r7]
 8000c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c50:	edc7 7a06 	vstr	s15, [r7, #24]
	int d2 = trunc(f2 * 1000);   // Turn into integer (123).
 8000c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c58:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000cd8 <ConvertToDecimal+0xb4>
 8000c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c60:	ee17 0a90 	vmov	r0, s15
 8000c64:	f7ff fc1c 	bl	80004a0 <__aeabi_f2d>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	ec44 3b10 	vmov	d0, r3, r4
 8000c70:	f001 fbfe 	bl	8002470 <trunc>
 8000c74:	ec54 3b10 	vmov	r3, r4, d0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	f7ff fe76 	bl	800096c <__aeabi_d2iz>
 8000c80:	4603      	mov	r3, r0
 8000c82:	617b      	str	r3, [r7, #20]
	sprintf(tmp,"%d",d1);
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	69fa      	ldr	r2, [r7, #28]
 8000c8a:	4914      	ldr	r1, [pc, #80]	; (8000cdc <ConvertToDecimal+0xb8>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f95b 	bl	8000f48 <siprintf>
	strcpy(res,tmp);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f001 fbde 	bl	800245a <strcpy>
	strcat(res,".");
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fa92 	bl	80001c8 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <ConvertToDecimal+0xbc>)
 8000cae:	461a      	mov	r2, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	8013      	strh	r3, [r2, #0]
	sprintf(tmp,"%d",d2);
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <ConvertToDecimal+0xb8>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f942 	bl	8000f48 <siprintf>
	strcat(res,tmp);
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f001 fbb6 	bl	800243c <strcat>


}
 8000cd0:	bf00      	nop
 8000cd2:	3724      	adds	r7, #36	; 0x24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	447a0000 	.word	0x447a0000
 8000cdc:	0800252c 	.word	0x0800252c
 8000ce0:	08002530 	.word	0x08002530

08000ce4 <ms_itoa>:



int ms_itoa( char *buf, unsigned int d, int base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
	int ind = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
	while (d/div >= base)
 8000cf8:	e004      	b.n	8000d04 <ms_itoa+0x20>
		div *= base;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	61fb      	str	r3, [r7, #28]

int ms_itoa( char *buf, unsigned int d, int base)
{
	int div = 1;
	int ind = 0;
	while (d/div >= base)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d2f3      	bcs.n	8000cfa <ms_itoa+0x16>
		div *= base;

	while (div != 0)
 8000d12:	e028      	b.n	8000d66 <ms_itoa+0x82>
	{
		int num = d/div;
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	617b      	str	r3, [r7, #20]
		d = d%div;
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d26:	fb02 f201 	mul.w	r2, r2, r1
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d36:	61fb      	str	r3, [r7, #28]
		if (num > 9)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	dd08      	ble.n	8000d50 <ms_itoa+0x6c>
			buf[ind] = (num-10) + 'A';
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	3237      	adds	r2, #55	; 0x37
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e007      	b.n	8000d60 <ms_itoa+0x7c>
		else
			buf[ind] = num + '0';
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	3230      	adds	r2, #48	; 0x30
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
	int div = 1;
	int ind = 0;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1d3      	bne.n	8000d14 <ms_itoa+0x30>
		else
			buf[ind] = num + '0';
		ind++;
	}

	buf[ind] = '\0';
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4413      	add	r3, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

	return ind;
 8000d76:	69bb      	ldr	r3, [r7, #24]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3724      	adds	r7, #36	; 0x24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000d94:	e004      	b.n	8000da0 <ts_itoa+0x1c>
		div *= base;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d2f3      	bcs.n	8000d96 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8000dae:	e029      	b.n	8000e04 <ts_itoa+0x80>
	{
		int num = d/div;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dc2:	fb02 f201 	mul.w	r2, r2, r1
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	dd0a      	ble.n	8000df0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1c59      	adds	r1, r3, #1
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	6011      	str	r1, [r2, #0]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	3237      	adds	r2, #55	; 0x37
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e009      	b.n	8000e04 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c59      	adds	r1, r3, #1
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	3230      	adds	r2, #48	; 0x30
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1d2      	bne.n	8000db0 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000e28:	e07d      	b.n	8000f26 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b25      	cmp	r3, #37	; 0x25
 8000e30:	d171      	bne.n	8000f16 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d01e      	beq.n	8000e7e <ts_formatstring+0x66>
 8000e40:	2b64      	cmp	r3, #100	; 0x64
 8000e42:	dc06      	bgt.n	8000e52 <ts_formatstring+0x3a>
 8000e44:	2b58      	cmp	r3, #88	; 0x58
 8000e46:	d050      	beq.n	8000eea <ts_formatstring+0xd2>
 8000e48:	2b63      	cmp	r3, #99	; 0x63
 8000e4a:	d00e      	beq.n	8000e6a <ts_formatstring+0x52>
 8000e4c:	2b25      	cmp	r3, #37	; 0x25
 8000e4e:	d058      	beq.n	8000f02 <ts_formatstring+0xea>
 8000e50:	e05d      	b.n	8000f0e <ts_formatstring+0xf6>
 8000e52:	2b73      	cmp	r3, #115	; 0x73
 8000e54:	d02b      	beq.n	8000eae <ts_formatstring+0x96>
 8000e56:	2b73      	cmp	r3, #115	; 0x73
 8000e58:	dc02      	bgt.n	8000e60 <ts_formatstring+0x48>
 8000e5a:	2b69      	cmp	r3, #105	; 0x69
 8000e5c:	d00f      	beq.n	8000e7e <ts_formatstring+0x66>
 8000e5e:	e056      	b.n	8000f0e <ts_formatstring+0xf6>
 8000e60:	2b75      	cmp	r3, #117	; 0x75
 8000e62:	d037      	beq.n	8000ed4 <ts_formatstring+0xbc>
 8000e64:	2b78      	cmp	r3, #120	; 0x78
 8000e66:	d040      	beq.n	8000eea <ts_formatstring+0xd2>
 8000e68:	e051      	b.n	8000f0e <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	60fa      	str	r2, [r7, #12]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	1d11      	adds	r1, r2, #4
 8000e74:	6079      	str	r1, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	701a      	strb	r2, [r3, #0]
				break;
 8000e7c:	e047      	b.n	8000f0e <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da07      	bge.n	8000e9e <ts_formatstring+0x86>
					{
						val *= -1;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	425b      	negs	r3, r3
 8000e92:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60fa      	str	r2, [r7, #12]
 8000e9a:	222d      	movs	r2, #45	; 0x2d
 8000e9c:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000e9e:	69f9      	ldr	r1, [r7, #28]
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff6c 	bl	8000d84 <ts_itoa>
				}
				break;
 8000eac:	e02f      	b.n	8000f0e <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	1d1a      	adds	r2, r3, #4
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000eb8:	e007      	b.n	8000eca <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	60fa      	str	r2, [r7, #12]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	1c51      	adds	r1, r2, #1
 8000ec4:	61b9      	str	r1, [r7, #24]
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f3      	bne.n	8000eba <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8000ed2:	e01c      	b.n	8000f0e <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff4e 	bl	8000d84 <ts_itoa>
				break;
 8000ee8:	e011      	b.n	8000f0e <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1d1a      	adds	r2, r3, #4
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2210      	movs	r2, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff42 	bl	8000d84 <ts_itoa>
				break;
 8000f00:	e005      	b.n	8000f0e <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60fa      	str	r2, [r7, #12]
 8000f08:	2225      	movs	r2, #37	; 0x25
 8000f0a:	701a      	strb	r2, [r3, #0]
				  break;
 8000f0c:	bf00      	nop
			}
			fmt++;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	e007      	b.n	8000f26 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	60fa      	str	r2, [r7, #12]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	1c51      	adds	r1, r2, #1
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f47f af7d 	bne.w	8000e2a <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1ad3      	subs	r3, r2, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop

08000f48 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8000f48:	b40e      	push	{r1, r2, r3}
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	69f9      	ldr	r1, [r7, #28]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff5b 	bl	8000e18 <ts_formatstring>
 8000f62:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f70:	b003      	add	sp, #12
 8000f72:	4770      	bx	lr

08000f74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <SystemInit+0x60>)
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <SystemInit+0x60>)
 8000f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <SystemInit+0x64>)
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SystemInit+0x64>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <SystemInit+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <SystemInit+0x64>)
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <SystemInit+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <SystemInit+0x64>)
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <SystemInit+0x68>)
 8000fae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <SystemInit+0x64>)
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <SystemInit+0x64>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000fc2:	f000 f80d 	bl	8000fe0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <SystemInit+0x60>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	24003010 	.word	0x24003010

08000fe0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <SetSysClock+0xe8>)
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <SetSysClock+0xe8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <SetSysClock+0xe8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <SetSysClock+0x38>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001016:	d1f0      	bne.n	8000ffa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <SetSysClock+0xe8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001024:	2301      	movs	r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	e001      	b.n	800102e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d142      	bne.n	80010ba <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <SetSysClock+0xe8>)
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <SetSysClock+0xe8>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <SetSysClock+0xec>)
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <SetSysClock+0xec>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <SetSysClock+0xe8>)
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <SetSysClock+0xe8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <SetSysClock+0xe8>)
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <SetSysClock+0xe8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <SetSysClock+0xe8>)
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <SetSysClock+0xe8>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800106a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <SetSysClock+0xe8>)
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <SetSysClock+0xf0>)
 8001070:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <SetSysClock+0xe8>)
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <SetSysClock+0xe8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800107e:	bf00      	nop
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <SetSysClock+0xe8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <SetSysClock+0xf4>)
 800108e:	f240 7205 	movw	r2, #1797	; 0x705
 8001092:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <SetSysClock+0xe8>)
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <SetSysClock+0xe8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <SetSysClock+0xe8>)
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <SetSysClock+0xe8>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80010ac:	bf00      	nop
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SetSysClock+0xe8>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d1f9      	bne.n	80010ae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000
 80010d0:	07405408 	.word	0x07405408
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80010ec:	e7fe      	b.n	80010ec <HardFault_Handler+0x4>
 80010ee:	bf00      	nop

080010f0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>
 80010f6:	bf00      	nop

080010f8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80010fc:	e7fe      	b.n	80010fc <BusFault_Handler+0x4>
 80010fe:	bf00      	nop

08001100 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>
 8001106:	bf00      	nop

08001108 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	ms_at++;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <SysTick_Handler+0x4c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <SysTick_Handler+0x4c>)
 8001144:	6013      	str	r3, [r2, #0]

	if(ms_at > 40 && wifi_con->new_response == 0){
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <SysTick_Handler+0x4c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b28      	cmp	r3, #40	; 0x28
 800114c:	d90a      	bls.n	8001164 <SysTick_Handler+0x2c>
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <SysTick_Handler+0x50>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8001156:	2b00      	cmp	r3, #0
 8001158:	d104      	bne.n	8001164 <SysTick_Handler+0x2c>
		wifi_con->new_response = 1;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <SysTick_Handler+0x50>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	}

	ms1++;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <SysTick_Handler+0x54>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <SysTick_Handler+0x54>)
 800116c:	6013      	str	r3, [r2, #0]
	msread++;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <SysTick_Handler+0x58>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <SysTick_Handler+0x58>)
 8001176:	6013      	str	r3, [r2, #0]


}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200000b8 	.word	0x200000b8
 8001188:	200000b0 	.word	0x200000b0
 800118c:	200000b4 	.word	0x200000b4
 8001190:	200000bc 	.word	0x200000bc

08001194 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{/*
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
		}

	} */

}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	//check the type of interrupt to make sure we have received some data.
	if( USART_GetITStatus(USART2, USART_IT_RXNE) ){
 80011aa:	f240 5125 	movw	r1, #1317	; 0x525
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <USART2_IRQHandler+0x64>)
 80011b0:	f000 fc66 	bl	8001a80 <USART_GetITStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d022      	beq.n	8001200 <USART2_IRQHandler+0x5c>
		int8_t ch = USART2->DR; //Read the character that we have received
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <USART2_IRQHandler+0x64>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	71fb      	strb	r3, [r7, #7]
		wifi_con->rsp[wifi_con->rx_index++] = ch;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <USART2_IRQHandler+0x68>)
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <USART2_IRQHandler+0x68>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80011ce:	1c58      	adds	r0, r3, #1
 80011d0:	f8c2 0400 	str.w	r0, [r2, #1024]	; 0x400
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	54ca      	strb	r2, [r1, r3]
		// reset to start of buffer
		if(wifi_con->rx_index >= 1024){
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <USART2_IRQHandler+0x68>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d304      	bcc.n	80011f0 <USART2_IRQHandler+0x4c>
			wifi_con->rx_index = 0;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <USART2_IRQHandler+0x68>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		}
		ms_at = 0;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <USART2_IRQHandler+0x6c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
		wifi_con->new_response = 0;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <USART2_IRQHandler+0x68>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404

	}


}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40004400 	.word	0x40004400
 800120c:	200000b0 	.word	0x200000b0
 8001210:	200000b8 	.word	0x200000b8

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr  r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123e:	f7ff fe99 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f001 f85f 	bl	8002304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f000 f8df 	bl	8001408 <main>
  bx  lr    
 800124a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800124c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001250:	080025a8 	.word	0x080025a8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001258:	20000084 	.word	0x20000084
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800125c:	20000084 	.word	0x20000084
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001260:	200009c8 	.word	0x200009c8

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <ConfigureUsart>:
}



void ConfigureUsart(uint32_t baudrate)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

	ser = (SERIAL_DATA*)malloc(sizeof(SERIAL_DATA));
 8001270:	f240 2006 	movw	r0, #518	; 0x206
 8001274:	f001 f86c 	bl	8002350 <malloc>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <ConfigureUsart+0xfc>)
 800127e:	601a      	str	r2, [r3, #0]
	ser->rx_index = 0;
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <ConfigureUsart+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	ser->rx_length = 255;
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <ConfigureUsart+0xfc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	ser->tx_length = 0;
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <ConfigureUsart+0xfc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	ser->tx_index = 0;
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <ConfigureUsart+0xfc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	ser->stuffed = 0;
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <ConfigureUsart+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	ser->sync = 0;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <ConfigureUsart+0xfc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	//enable the clocks for the GPIOB and the USART
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80012bc:	2101      	movs	r1, #1
 80012be:	2010      	movs	r0, #16
 80012c0:	f000 fd24 	bl	8001d0c <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2002      	movs	r0, #2
 80012c8:	f000 fce0 	bl	8001c8c <RCC_AHB1PeriphClockCmd>

	//Initialise pins GPIOB 6 and GPIOB 7
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80012cc:	23c0      	movs	r3, #192	; 0xc0
 80012ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; //we are setting the pin to be alternative function
 80012d0:	2302      	movs	r3, #2
 80012d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4619      	mov	r1, r3
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <ConfigureUsart+0x100>)
 80012f0:	f000 fd4c 	bl	8001d8c <GPIO_Init>

	//Connect the TX and RX pins to their alternate function pins
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 80012f4:	2207      	movs	r2, #7
 80012f6:	2106      	movs	r1, #6
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <ConfigureUsart+0x100>)
 80012fa:	f000 fdd5 	bl	8001ea8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 80012fe:	2207      	movs	r2, #7
 8001300:	2107      	movs	r1, #7
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <ConfigureUsart+0x100>)
 8001304:	f000 fdd0 	bl	8001ea8 <GPIO_PinAFConfig>

	//configure USART
	USART_InitStruct.USART_BaudRate = baudrate;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800130c:	2300      	movs	r3, #0
 800130e:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001310:	2300      	movs	r3, #0
 8001312:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001314:	2300      	movs	r3, #0
 8001316:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001318:	2300      	movs	r3, #0
 800131a:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; //enable send and receive (Tx and Rx)
 800131c:	230c      	movs	r3, #12
 800131e:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <ConfigureUsart+0x104>)
 8001328:	f000 fa76 	bl	8001818 <USART_Init>

	//Enable the interupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800132c:	2201      	movs	r2, #1
 800132e:	f240 5125 	movw	r1, #1317	; 0x525
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <ConfigureUsart+0x104>)
 8001334:	f000 fb5c 	bl	80019f0 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8001338:	2325      	movs	r3, #37	; 0x25
 800133a:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f000 ff77 	bl	8002240 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8001352:	2101      	movs	r1, #1
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <ConfigureUsart+0x104>)
 8001356:	f000 fb19 	bl	800198c <USART_Cmd>
}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000c0 	.word	0x200000c0
 8001368:	40020400 	.word	0x40020400
 800136c:	40011000 	.word	0x40011000

08001370 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da0b      	bge.n	800139c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001384:	490d      	ldr	r1, [pc, #52]	; (80013bc <NVIC_SetPriority+0x4c>)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	3b04      	subs	r3, #4
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800139a:	e009      	b.n	80013b0 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800139c:	4908      	ldr	r1, [pc, #32]	; (80013c0 <NVIC_SetPriority+0x50>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d2:	d301      	bcc.n	80013d8 <SysTick_Config+0x14>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e011      	b.n	80013fc <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013e0:	3b01      	subs	r3, #1
 80013e2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80013e4:	210f      	movs	r1, #15
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f7ff ffc1 	bl	8001370 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <SysTick_Config+0x40>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e000e010 	.word	0xe000e010

08001408 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b0ad      	sub	sp, #180	; 0xb4
 800140c:	af00      	add	r7, sp, #0
	char data_out[100];
	uint32_t numread;
	float read_tot;
	float read;

	RCC_GetClocksFreq(&RCC_Clocks);
 800140e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fb90 	bl	8001b38 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8001418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800141c:	4a8f      	ldr	r2, [pc, #572]	; (800165c <main+0x254>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffcd 	bl	80013c4 <SysTick_Config>

	DelayMs(500);
 800142a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142e:	f7ff fbe3 	bl	8000bf8 <DelayMs>

	ADC_Configuration();
 8001432:	f000 f99b 	bl	800176c <ADC_Configuration>


	ConfigureUsart(115200);
 8001436:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800143a:	f7ff ff15 	bl	8001268 <ConfigureUsart>
	ConfigureWifiUsart(115200);
 800143e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001442:	f7ff fb4d 	bl	8000ae0 <ConfigureWifiUsart>

	DelayMs(5000);
 8001446:	f241 3088 	movw	r0, #5000	; 0x1388
 800144a:	f7ff fbd5 	bl	8000bf8 <DelayMs>

	WiFiInit();
 800144e:	f7ff fbb7 	bl	8000bc0 <WiFiInit>

	while (1)
	{


		msread = 0;
 8001452:	4b83      	ldr	r3, [pc, #524]	; (8001660 <main+0x258>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
		read_tot = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		numread = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		while(msread < 16 * 1000){
 8001466:	e01b      	b.n	80014a0 <main+0x98>
			if(msread % 5000 == 0){
 8001468:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <main+0x258>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <main+0x25c>)
 800146e:	fba3 1302 	umull	r1, r3, r3, r2
 8001472:	0b1b      	lsrs	r3, r3, #12
 8001474:	f241 3188 	movw	r1, #5000	; 0x1388
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10e      	bne.n	80014a0 <main+0x98>
				read_tot += ReadClampSensor();
 8001482:	f000 f931 	bl	80016e8 <ReadClampSensor>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800148e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001492:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				numread++;
 8001496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800149a:	3301      	adds	r3, #1
 800149c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


		msread = 0;
		read_tot = 0;
		numread = 0;
		while(msread < 16 * 1000){
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <main+0x258>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80014a8:	d3de      	bcc.n	8001468 <main+0x60>
			if(msread % 5000 == 0){
				read_tot += ReadClampSensor();
				numread++;
			}
		}
		read = read_tot/numread;
 80014aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b6:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

		strcpy(cmdBuffer,"AT+CIPSTART=0,");
 80014c2:	4a69      	ldr	r2, [pc, #420]	; (8001668 <main+0x260>)
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <main+0x264>)
 80014c6:	4614      	mov	r4, r2
 80014c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014ca:	6020      	str	r0, [r4, #0]
 80014cc:	6061      	str	r1, [r4, #4]
 80014ce:	60a2      	str	r2, [r4, #8]
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	81a2      	strh	r2, [r4, #12]
 80014d6:	73a3      	strb	r3, [r4, #14]
		strcat(cmdBuffer,"\"");
 80014d8:	4863      	ldr	r0, [pc, #396]	; (8001668 <main+0x260>)
 80014da:	f7fe fe75 	bl	80001c8 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b61      	ldr	r3, [pc, #388]	; (8001668 <main+0x260>)
 80014e4:	4413      	add	r3, r2
 80014e6:	4962      	ldr	r1, [pc, #392]	; (8001670 <main+0x268>)
 80014e8:	461a      	mov	r2, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8013      	strh	r3, [r2, #0]
		strcat(cmdBuffer,PortType);
 80014f0:	4b60      	ldr	r3, [pc, #384]	; (8001674 <main+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	485c      	ldr	r0, [pc, #368]	; (8001668 <main+0x260>)
 80014f8:	f000 ffa0 	bl	800243c <strcat>
		strcat(cmdBuffer,"\",");
 80014fc:	485a      	ldr	r0, [pc, #360]	; (8001668 <main+0x260>)
 80014fe:	f7fe fe63 	bl	80001c8 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <main+0x260>)
 8001508:	4413      	add	r3, r2
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <main+0x270>)
 800150c:	8811      	ldrh	r1, [r2, #0]
 800150e:	7892      	ldrb	r2, [r2, #2]
 8001510:	8019      	strh	r1, [r3, #0]
 8001512:	709a      	strb	r2, [r3, #2]
		strcat(cmdBuffer,"\"");
 8001514:	4854      	ldr	r0, [pc, #336]	; (8001668 <main+0x260>)
 8001516:	f7fe fe57 	bl	80001c8 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b52      	ldr	r3, [pc, #328]	; (8001668 <main+0x260>)
 8001520:	4413      	add	r3, r2
 8001522:	4953      	ldr	r1, [pc, #332]	; (8001670 <main+0x268>)
 8001524:	461a      	mov	r2, r3
 8001526:	460b      	mov	r3, r1
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	8013      	strh	r3, [r2, #0]
		strcat(cmdBuffer,PortAddress);
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <main+0x274>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	484d      	ldr	r0, [pc, #308]	; (8001668 <main+0x260>)
 8001534:	f000 ff82 	bl	800243c <strcat>
		strcat(cmdBuffer,"\",");
 8001538:	484b      	ldr	r0, [pc, #300]	; (8001668 <main+0x260>)
 800153a:	f7fe fe45 	bl	80001c8 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <main+0x260>)
 8001544:	4413      	add	r3, r2
 8001546:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <main+0x270>)
 8001548:	8811      	ldrh	r1, [r2, #0]
 800154a:	7892      	ldrb	r2, [r2, #2]
 800154c:	8019      	strh	r1, [r3, #0]
 800154e:	709a      	strb	r2, [r3, #2]
		strcat(cmdBuffer,PortNumber);
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <main+0x278>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4844      	ldr	r0, [pc, #272]	; (8001668 <main+0x260>)
 8001558:	f000 ff70 	bl	800243c <strcat>
		strcat(cmdBuffer,"\r");
 800155c:	4842      	ldr	r0, [pc, #264]	; (8001668 <main+0x260>)
 800155e:	f7fe fe33 	bl	80001c8 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <main+0x260>)
 8001568:	4413      	add	r3, r2
 800156a:	4946      	ldr	r1, [pc, #280]	; (8001684 <main+0x27c>)
 800156c:	461a      	mov	r2, r3
 800156e:	460b      	mov	r3, r1
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	8013      	strh	r3, [r2, #0]

		RunWifiCommand(cmdBuffer);
 8001574:	483c      	ldr	r0, [pc, #240]	; (8001668 <main+0x260>)
 8001576:	f7ff fa71 	bl	8000a5c <RunWifiCommand>




		ConvertToDecimal(buff,read);
 800157a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800157e:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb4e 	bl	8000c24 <ConvertToDecimal>
		strcpy(data_out,AccountId);
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <main+0x280>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f000 ff62 	bl	800245a <strcpy>
		strcat(data_out,",E=");
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe15 	bl	80001c8 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <main+0x284>)
 80015a8:	6810      	ldr	r0, [r2, #0]
 80015aa:	6018      	str	r0, [r3, #0]
		strcat(data_out,buff);
 80015ac:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 ff41 	bl	800243c <strcat>
		strcat(data_out,"\r\n");
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe03 	bl	80001c8 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	4a31      	ldr	r2, [pc, #196]	; (8001690 <main+0x288>)
 80015cc:	8811      	ldrh	r1, [r2, #0]
 80015ce:	7892      	ldrb	r2, [r2, #2]
 80015d0:	8019      	strh	r1, [r3, #0]
 80015d2:	709a      	strb	r2, [r3, #2]


		SendUartData(data_out);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f860 	bl	800169c <SendUartData>

		DelayMs(500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f7ff fb0a 	bl	8000bf8 <DelayMs>
		strcpy(cmdBuffer,"AT+CIPSEND=0,");
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <main+0x260>)
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <main+0x28c>)
 80015e8:	4614      	mov	r4, r2
 80015ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015ec:	6020      	str	r0, [r4, #0]
 80015ee:	6061      	str	r1, [r4, #4]
 80015f0:	60a2      	str	r2, [r4, #8]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	81a3      	strh	r3, [r4, #12]
		ms_itoa(tmp,strlen(data_out),10 );
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fde5 	bl	80001c8 <strlen>
 80015fe:	4601      	mov	r1, r0
 8001600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001604:	220a      	movs	r2, #10
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb6c 	bl	8000ce4 <ms_itoa>
		strcat(cmdBuffer,tmp);
 800160c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001610:	4619      	mov	r1, r3
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <main+0x260>)
 8001614:	f000 ff12 	bl	800243c <strcat>
		strcat(cmdBuffer,"\r");
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <main+0x260>)
 800161a:	f7fe fdd5 	bl	80001c8 <strlen>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <main+0x260>)
 8001624:	4413      	add	r3, r2
 8001626:	4917      	ldr	r1, [pc, #92]	; (8001684 <main+0x27c>)
 8001628:	461a      	mov	r2, r3
 800162a:	460b      	mov	r3, r1
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	8013      	strh	r3, [r2, #0]

		RunWifiCommand(cmdBuffer);
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <main+0x260>)
 8001632:	f7ff fa13 	bl	8000a5c <RunWifiCommand>
		DelayMs(20);
 8001636:	2014      	movs	r0, #20
 8001638:	f7ff fade 	bl	8000bf8 <DelayMs>

		SendAT(data_out);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa2c 	bl	8000a9c <SendAT>

		DelayMs(20);
 8001644:	2014      	movs	r0, #20
 8001646:	f7ff fad7 	bl	8000bf8 <DelayMs>

		RunWifiCommand("AT+CIPCLOSE=0\r");
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <main+0x290>)
 800164c:	f7ff fa06 	bl	8000a5c <RunWifiCommand>

		DelayMs(2000);
 8001650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001654:	f7ff fad0 	bl	8000bf8 <DelayMs>


	}
 8001658:	e6fb      	b.n	8001452 <main+0x4a>
 800165a:	bf00      	nop
 800165c:	10624dd3 	.word	0x10624dd3
 8001660:	200000bc 	.word	0x200000bc
 8001664:	d1b71759 	.word	0xd1b71759
 8001668:	200000c4 	.word	0x200000c4
 800166c:	08002558 	.word	0x08002558
 8001670:	08002568 	.word	0x08002568
 8001674:	20000004 	.word	0x20000004
 8001678:	0800256c 	.word	0x0800256c
 800167c:	20000008 	.word	0x20000008
 8001680:	2000000c 	.word	0x2000000c
 8001684:	08002570 	.word	0x08002570
 8001688:	20000000 	.word	0x20000000
 800168c:	08002574 	.word	0x08002574
 8001690:	08002578 	.word	0x08002578
 8001694:	0800257c 	.word	0x0800257c
 8001698:	0800258c 	.word	0x0800258c

0800169c <SendUartData>:

}


void SendUartData(volatile char* s)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	while(*s){
 80016a4:	e013      	b.n	80016ce <SendUartData+0x32>
		// wait until data register is empty
		while( !(USART1->SR & 0x00000040) );
 80016a6:	bf00      	nop
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <SendUartData+0x44>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f8      	beq.n	80016a8 <SendUartData+0xc>
		USART_SendData(USART1, *s);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <SendUartData+0x44>)
 80016c2:	f000 f983 	bl	80019cc <USART_SendData>
		*s++;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	781b      	ldrb	r3, [r3, #0]
}


void SendUartData(volatile char* s)
{
	while(*s){
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e6      	bne.n	80016a6 <SendUartData+0xa>
		// wait until data register is empty
		while( !(USART1->SR & 0x00000040) );
		USART_SendData(USART1, *s);
		*s++;
	}
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40011000 	.word	0x40011000
 80016e4:	00000000 	.word	0x00000000

080016e8 <ReadClampSensor>:



float ReadClampSensor(void)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0

	uint16_t read;
	float result = 0.0;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
	int i;

	uint32_t tot = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]

	r_ptr = 0;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <ReadClampSensor+0x80>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 600; i++){
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00f      	b.n	8001724 <ReadClampSensor+0x3c>
		read = adc_convert();
 8001704:	f000 f872 	bl	80017ec <adc_convert>
 8001708:	4603      	mov	r3, r0
 800170a:	807b      	strh	r3, [r7, #2]
		if(read > tot)
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	429a      	cmp	r2, r3
 8001712:	d901      	bls.n	8001718 <ReadClampSensor+0x30>
			tot = read;
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	60bb      	str	r3, [r7, #8]
		DelayMs(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fa6d 	bl	8000bf8 <DelayMs>
	int i;

	uint32_t tot = 0;

	r_ptr = 0;
	for(i = 0; i < 600; i++){
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800172a:	dbeb      	blt.n	8001704 <ReadClampSensor+0x1c>
		if(read > tot)
			tot = read;
		DelayMs(1);
	}

	result = (double)tot * 0.024;
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	f7fe fe95 	bl	800045c <__aeabi_ui2d>
 8001732:	a30b      	add	r3, pc, #44	; (adr r3, 8001760 <ReadClampSensor+0x78>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe ff06 	bl	8000548 <__aeabi_dmul>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	f7ff f93a 	bl	80009bc <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	607b      	str	r3, [r7, #4]


	return result;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	ee07 3a90 	vmov	s15, r3


}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	f3af 8000 	nop.w
 8001760:	bc6a7efa 	.word	0xbc6a7efa
 8001764:	3f989374 	.word	0x3f989374
 8001768:	200000a0 	.word	0x200000a0

0800176c <ADC_Configuration>:
#include "adc.h"
#include <stdlib.h>


void ADC_Configuration(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

	ADC_InitTypeDef ADC_init_structure; //Structure for adc confguration
	 GPIO_InitTypeDef GPIO_initStructre; //Structure for analog input pin
	 //Clock configuration
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);//The ADC1 is connected the APB2 peripheral bus thus we will use its clock source
 8001772:	2101      	movs	r1, #1
 8001774:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001778:	f000 fac8 	bl	8001d0c <RCC_APB2PeriphClockCmd>
	 RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOCEN,ENABLE);//Clock for the ADC port!! Do not forget about this one ;)
 800177c:	2101      	movs	r1, #1
 800177e:	2004      	movs	r0, #4
 8001780:	f000 fa84 	bl	8001c8c <RCC_AHB1PeriphClockCmd>
	 //Analog pin configuration
	 GPIO_initStructre.GPIO_Pin = GPIO_Pin_0;//The channel 10 is connected to PC0
 8001784:	2301      	movs	r3, #1
 8001786:	603b      	str	r3, [r7, #0]
	 GPIO_initStructre.GPIO_Mode = GPIO_Mode_AN; //The PC0 pin is configured in analog mode
 8001788:	2303      	movs	r3, #3
 800178a:	713b      	strb	r3, [r7, #4]
	 GPIO_initStructre.GPIO_PuPd = GPIO_PuPd_NOPULL; //We don't need any pull up or pull down
 800178c:	2300      	movs	r3, #0
 800178e:	71fb      	strb	r3, [r7, #7]
	 GPIO_Init(GPIOC,&GPIO_initStructre);//Affecting the port with the initialization structure configuration
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4813      	ldr	r0, [pc, #76]	; (80017e4 <ADC_Configuration+0x78>)
 8001796:	f000 faf9 	bl	8001d8c <GPIO_Init>
	 //ADC structure configuration
	 ADC_DeInit();
 800179a:	f000 fbcf 	bl	8001f3c <ADC_DeInit>
	 ADC_init_structure.ADC_DataAlign = ADC_DataAlign_Right;//data converted will be shifted to right
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
	 ADC_init_structure.ADC_Resolution = ADC_Resolution_12b;//Input voltage is converted into a 12bit number giving a maximum value of 4096
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
	 ADC_init_structure.ADC_ContinuousConvMode = ENABLE; //the conversion is continuous, the input data is converted more than once
 80017a6:	2301      	movs	r3, #1
 80017a8:	737b      	strb	r3, [r7, #13]
	 ADC_init_structure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;// conversion is synchronous with TIM1 and CC1 (actually I'm not sure about this one :/)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
	 ADC_init_structure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;//no trigger for conversion
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
	 ADC_init_structure.ADC_NbrOfConversion = 1;//I think this one is clear :p
 80017b2:	2301      	movs	r3, #1
 80017b4:	773b      	strb	r3, [r7, #28]
	 ADC_init_structure.ADC_ScanConvMode = DISABLE;//The scan is configured in one channel
 80017b6:	2300      	movs	r3, #0
 80017b8:	733b      	strb	r3, [r7, #12]
	 ADC_Init(ADC1,&ADC_init_structure);//Initialize ADC with the previous configuration
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <ADC_Configuration+0x7c>)
 80017c2:	f000 fbc9 	bl	8001f58 <ADC_Init>
	 //Enable ADC conversion
	 ADC_Cmd(ADC1,ENABLE);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <ADC_Configuration+0x7c>)
 80017ca:	f000 fc1b 	bl	8002004 <ADC_Cmd>
	 //Select the channel to be read from
	 ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
 80017ce:	2306      	movs	r3, #6
 80017d0:	2201      	movs	r2, #1
 80017d2:	210a      	movs	r1, #10
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <ADC_Configuration+0x7c>)
 80017d6:	f000 fc31 	bl	800203c <ADC_RegularChannelConfig>

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40012000 	.word	0x40012000

080017ec <adc_convert>:

uint16_t adc_convert(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	 ADC_SoftwareStartConv(ADC1);//Start the conversion
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <adc_convert+0x28>)
 80017f2:	f000 fced 	bl	80021d0 <ADC_SoftwareStartConv>
	 while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
 80017f6:	bf00      	nop
 80017f8:	2102      	movs	r1, #2
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <adc_convert+0x28>)
 80017fc:	f000 fd06 	bl	800220c <ADC_GetFlagStatus>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f8      	beq.n	80017f8 <adc_convert+0xc>
	 return ADC_GetConversionValue(ADC1); //Return the converted data
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <adc_convert+0x28>)
 8001808:	f000 fcf2 	bl	80021f0 <ADC_GetConversionValue>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012000 	.word	0x40012000

08001818 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8a1b      	ldrh	r3, [r3, #16]
 8001836:	b29b      	uxth	r3, r3
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001840:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	88db      	ldrh	r3, [r3, #6]
 8001846:	461a      	mov	r2, r3
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	4313      	orrs	r3, r2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	899b      	ldrh	r3, [r3, #12]
 800185a:	b29b      	uxth	r3, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001864:	f023 030c 	bic.w	r3, r3, #12
 8001868:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	889a      	ldrh	r2, [r3, #4]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	891b      	ldrh	r3, [r3, #8]
 8001872:	4313      	orrs	r3, r2
 8001874:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800187a:	4313      	orrs	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	4313      	orrs	r3, r2
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8a9b      	ldrh	r3, [r3, #20]
 8001892:	b29b      	uxth	r3, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800189c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	899b      	ldrh	r3, [r3, #12]
 80018a2:	461a      	mov	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	4313      	orrs	r3, r2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f93e 	bl	8001b38 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a30      	ldr	r2, [pc, #192]	; (8001980 <USART_Init+0x168>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <USART_Init+0xb4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <USART_Init+0x16c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	e001      	b.n	80018d6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	899b      	ldrh	r3, [r3, #12]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21b      	sxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da0c      	bge.n	80018fc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009a      	lsls	r2, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e00b      	b.n	8001914 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009a      	lsls	r2, r3, #2
 8001906:	441a      	add	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <USART_Init+0x170>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	2264      	movs	r2, #100	; 0x64
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	899b      	ldrh	r3, [r3, #12]
 8001936:	b29b      	uxth	r3, r3
 8001938:	b21b      	sxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	da0c      	bge.n	8001958 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	3332      	adds	r3, #50	; 0x32
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <USART_Init+0x170>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	4313      	orrs	r3, r2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	e00b      	b.n	8001970 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	3332      	adds	r3, #50	; 0x32
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <USART_Init+0x170>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	4313      	orrs	r3, r2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	811a      	strh	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	51eb851f 	.word	0x51eb851f

0800198c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80019ae:	e007      	b.n	80019c0 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	899b      	ldrh	r3, [r3, #12]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	819a      	strh	r2, [r3, #12]
  }
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	809a      	strh	r2, [r3, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001a26:	2201      	movs	r2, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d103      	bne.n	8001a3e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e009      	b.n	8001a52 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d103      	bne.n	8001a4c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3310      	adds	r3, #16
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e002      	b.n	8001a52 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3314      	adds	r3, #20
 8001a50:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001a52:	787b      	ldrb	r3, [r7, #1]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001a64:	e006      	b.n	8001a74 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6811      	ldr	r1, [r2, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	43d2      	mvns	r2, r2
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
  }
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	899b      	ldrh	r3, [r3, #12]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e011      	b.n	8001af2 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	8a1b      	ldrh	r3, [r3, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e006      	b.n	8001af2 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8a9b      	ldrh	r3, [r3, #20]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4013      	ands	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001afa:	2201      	movs	r2, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <USART_GetITStatus+0xa4>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	74fb      	strb	r3, [r7, #19]
 8001b22:	e001      	b.n	8001b28 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	2302      	movs	r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b58:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d007      	beq.n	8001b78 <RCC_GetClocksFreq+0x40>
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d009      	beq.n	8001b80 <RCC_GetClocksFreq+0x48>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d13f      	bne.n	8001bf0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <RCC_GetClocksFreq+0x148>)
 8001b74:	601a      	str	r2, [r3, #0]
      break;
 8001b76:	e03f      	b.n	8001bf8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a42      	ldr	r2, [pc, #264]	; (8001c84 <RCC_GetClocksFreq+0x14c>)
 8001b7c:	601a      	str	r2, [r3, #0]
      break;
 8001b7e:	e03b      	b.n	8001bf8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b88:	0d9b      	lsrs	r3, r3, #22
 8001b8a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b94:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b9c:	4a39      	ldr	r2, [pc, #228]	; (8001c84 <RCC_GetClocksFreq+0x14c>)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bac:	400b      	ands	r3, r1
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	fb03 f302 	mul.w	r3, r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e00c      	b.n	8001bd2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001bb8:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <RCC_GetClocksFreq+0x148>)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc8:	400b      	ands	r3, r1
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	fb03 f302 	mul.w	r3, r3, r2
 8001bd0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	3301      	adds	r3, #1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
      break;
 8001bee:	e003      	b.n	8001bf8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <RCC_GetClocksFreq+0x148>)
 8001bf4:	601a      	str	r2, [r3, #0]
      break;
 8001bf6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <RCC_GetClocksFreq+0x150>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c28:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	0a9b      	lsrs	r3, r3, #10
 8001c2e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <RCC_GetClocksFreq+0x150>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <RCC_GetClocksFreq+0x144>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c50:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	0b5b      	lsrs	r3, r3, #13
 8001c56:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <RCC_GetClocksFreq+0x150>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3724      	adds	r7, #36	; 0x24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200
 8001c88:	20000010 	.word	0x20000010

08001c8c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001c9e:	490a      	ldr	r1, [pc, #40]	; (8001cc8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001caa:	e006      	b.n	8001cba <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001cde:	490a      	ldr	r1, [pc, #40]	; (8001d08 <RCC_APB1PeriphClockCmd+0x3c>)
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <RCC_APB1PeriphClockCmd+0x3c>)
 8001ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001cea:	e006      	b.n	8001cfa <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001cec:	4906      	ldr	r1, [pc, #24]	; (8001d08 <RCC_APB1PeriphClockCmd+0x3c>)
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <RCC_APB1PeriphClockCmd+0x3c>)
 8001cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001d2a:	e006      	b.n	8001d3a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4013      	ands	r3, r2
 8001d38:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001d5e:	490a      	ldr	r1, [pc, #40]	; (8001d88 <RCC_APB2PeriphResetCmd+0x3c>)
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <RCC_APB2PeriphResetCmd+0x3c>)
 8001d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001d6a:	e006      	b.n	8001d7a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <RCC_APB2PeriphResetCmd+0x3c>)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <RCC_APB2PeriphResetCmd+0x3c>)
 8001d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4013      	ands	r3, r2
 8001d78:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e076      	b.n	8001e96 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d165      	bne.n	8001e90 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2103      	movs	r1, #3
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	4619      	mov	r1, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	791b      	ldrb	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d003      	beq.n	8001e02 <GPIO_Init+0x76>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d12e      	bne.n	8001e60 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	4619      	mov	r1, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	799b      	ldrb	r3, [r3, #6]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	79db      	ldrb	r3, [r3, #7]
 8001e80:	4619      	mov	r1, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d985      	bls.n	8001da8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ec0:	787a      	ldrb	r2, [r7, #1]
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	ea02 0103 	and.w	r1, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f100 0208 	add.w	r2, r0, #8
 8001f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f46:	f7ff ff01 	bl	8001d4c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f50:	f7ff fefc 	bl	8001d4c <RCC_APB2PeriphResetCmd>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	791b      	ldrb	r3, [r3, #4]
 8001f80:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001f86:	4313      	orrs	r3, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <ADC_Init+0xa8>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001faa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001fb0:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	795b      	ldrb	r3, [r3, #5]
 8001fb6:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7d1b      	ldrb	r3, [r3, #20]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	c0fff7fd 	.word	0xc0fff7fd

08002004 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8002022:	e005      	b.n	8002030 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 0201 	bic.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
  }
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	70fb      	strb	r3, [r7, #3]
 800204e:	460b      	mov	r3, r1
 8002050:	70bb      	strb	r3, [r7, #2]
 8002052:	4613      	mov	r3, r2
 8002054:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	2b09      	cmp	r3, #9
 8002062:	d923      	bls.n	80020ac <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f1a3 020a 	sub.w	r2, r3, #10
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	43db      	mvns	r3, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002088:	7879      	ldrb	r1, [r7, #1]
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f1a3 020a 	sub.w	r2, r3, #10
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	e01e      	b.n	80020ea <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80020cc:	7879      	ldrb	r1, [r7, #1]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80020ea:	78bb      	ldrb	r3, [r7, #2]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d821      	bhi.n	8002134 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80020f6:	78bb      	ldrb	r3, [r7, #2]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	43db      	mvns	r3, r3
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002112:	78f9      	ldrb	r1, [r7, #3]
 8002114:	78bb      	ldrb	r3, [r7, #2]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002132:	e047      	b.n	80021c4 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8002134:	78bb      	ldrb	r3, [r7, #2]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d821      	bhi.n	800217e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002140:	78bb      	ldrb	r3, [r7, #2]
 8002142:	1fda      	subs	r2, r3, #7
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	221f      	movs	r2, #31
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	43db      	mvns	r3, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800215c:	78f9      	ldrb	r1, [r7, #3]
 800215e:	78bb      	ldrb	r3, [r7, #2]
 8002160:	1fda      	subs	r2, r3, #7
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800217c:	e022      	b.n	80021c4 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002184:	78bb      	ldrb	r3, [r7, #2]
 8002186:	f1a3 020d 	sub.w	r2, r3, #13
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	43db      	mvns	r3, r3
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80021a2:	78f9      	ldrb	r1, [r7, #3]
 80021a4:	78bb      	ldrb	r3, [r7, #2]
 80021a6:	f1a3 020d 	sub.w	r2, r3, #13
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	b29b      	uxth	r3, r3
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop

0800220c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	2300      	movs	r3, #0
 800224e:	73bb      	strb	r3, [r7, #14]
 8002250:	230f      	movs	r3, #15
 8002252:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	78db      	ldrb	r3, [r3, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d038      	beq.n	80022ce <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <NVIC_Init+0xbc>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	f1c3 0304 	rsb	r3, r3, #4
 8002270:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002272:	7b7a      	ldrb	r2, [r7, #13]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	fa42 f303 	asr.w	r3, r2, r3
 800227a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	461a      	mov	r2, r3
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	789a      	ldrb	r2, [r3, #2]
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	4013      	ands	r3, r2
 8002292:	b2da      	uxtb	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <NVIC_Init+0xc0>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <NVIC_Init+0xc0>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80022c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80022cc:	e00f      	b.n	80022ee <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80022ce:	490c      	ldr	r1, [pc, #48]	; (8002300 <NVIC_Init+0xc0>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2201      	movs	r2, #1
 80022e4:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80022e6:	f100 0320 	add.w	r3, r0, #32
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	e000e100 	.word	0xe000e100

08002304 <__libc_init_array>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <__libc_init_array+0x3c>)
 8002308:	4c0e      	ldr	r4, [pc, #56]	; (8002344 <__libc_init_array+0x40>)
 800230a:	1ae4      	subs	r4, r4, r3
 800230c:	10a4      	asrs	r4, r4, #2
 800230e:	2500      	movs	r5, #0
 8002310:	461e      	mov	r6, r3
 8002312:	42a5      	cmp	r5, r4
 8002314:	d004      	beq.n	8002320 <__libc_init_array+0x1c>
 8002316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800231a:	4798      	blx	r3
 800231c:	3501      	adds	r5, #1
 800231e:	e7f8      	b.n	8002312 <__libc_init_array+0xe>
 8002320:	f000 f8e8 	bl	80024f4 <_init>
 8002324:	4c08      	ldr	r4, [pc, #32]	; (8002348 <__libc_init_array+0x44>)
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <__libc_init_array+0x48>)
 8002328:	1ae4      	subs	r4, r4, r3
 800232a:	10a4      	asrs	r4, r4, #2
 800232c:	2500      	movs	r5, #0
 800232e:	461e      	mov	r6, r3
 8002330:	42a5      	cmp	r5, r4
 8002332:	d004      	beq.n	800233e <__libc_init_array+0x3a>
 8002334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002338:	4798      	blx	r3
 800233a:	3501      	adds	r5, #1
 800233c:	e7f8      	b.n	8002330 <__libc_init_array+0x2c>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	080025a0 	.word	0x080025a0
 8002344:	080025a0 	.word	0x080025a0
 8002348:	080025a4 	.word	0x080025a4
 800234c:	080025a0 	.word	0x080025a0

08002350 <malloc>:
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <malloc+0xc>)
 8002352:	4601      	mov	r1, r0
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f000 b803 	b.w	8002360 <_malloc_r>
 800235a:	bf00      	nop
 800235c:	20000080 	.word	0x20000080

08002360 <_malloc_r>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	1ccd      	adds	r5, r1, #3
 8002364:	f025 0503 	bic.w	r5, r5, #3
 8002368:	3508      	adds	r5, #8
 800236a:	2d0c      	cmp	r5, #12
 800236c:	bf38      	it	cc
 800236e:	250c      	movcc	r5, #12
 8002370:	2d00      	cmp	r5, #0
 8002372:	4606      	mov	r6, r0
 8002374:	db01      	blt.n	800237a <_malloc_r+0x1a>
 8002376:	42a9      	cmp	r1, r5
 8002378:	d902      	bls.n	8002380 <_malloc_r+0x20>
 800237a:	230c      	movs	r3, #12
 800237c:	6033      	str	r3, [r6, #0]
 800237e:	e046      	b.n	800240e <_malloc_r+0xae>
 8002380:	f000 f873 	bl	800246a <__malloc_lock>
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <_malloc_r+0xb4>)
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4621      	mov	r1, r4
 800238c:	b1a1      	cbz	r1, 80023b8 <_malloc_r+0x58>
 800238e:	680b      	ldr	r3, [r1, #0]
 8002390:	1b5b      	subs	r3, r3, r5
 8002392:	d40e      	bmi.n	80023b2 <_malloc_r+0x52>
 8002394:	2b0b      	cmp	r3, #11
 8002396:	d903      	bls.n	80023a0 <_malloc_r+0x40>
 8002398:	600b      	str	r3, [r1, #0]
 800239a:	18cc      	adds	r4, r1, r3
 800239c:	50cd      	str	r5, [r1, r3]
 800239e:	e01e      	b.n	80023de <_malloc_r+0x7e>
 80023a0:	428c      	cmp	r4, r1
 80023a2:	bf0d      	iteet	eq
 80023a4:	6863      	ldreq	r3, [r4, #4]
 80023a6:	684b      	ldrne	r3, [r1, #4]
 80023a8:	6063      	strne	r3, [r4, #4]
 80023aa:	6013      	streq	r3, [r2, #0]
 80023ac:	bf18      	it	ne
 80023ae:	460c      	movne	r4, r1
 80023b0:	e015      	b.n	80023de <_malloc_r+0x7e>
 80023b2:	460c      	mov	r4, r1
 80023b4:	6849      	ldr	r1, [r1, #4]
 80023b6:	e7e9      	b.n	800238c <_malloc_r+0x2c>
 80023b8:	4c17      	ldr	r4, [pc, #92]	; (8002418 <_malloc_r+0xb8>)
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	b91b      	cbnz	r3, 80023c6 <_malloc_r+0x66>
 80023be:	4630      	mov	r0, r6
 80023c0:	f000 f82c 	bl	800241c <_sbrk_r>
 80023c4:	6020      	str	r0, [r4, #0]
 80023c6:	4629      	mov	r1, r5
 80023c8:	4630      	mov	r0, r6
 80023ca:	f000 f827 	bl	800241c <_sbrk_r>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	d018      	beq.n	8002404 <_malloc_r+0xa4>
 80023d2:	1cc4      	adds	r4, r0, #3
 80023d4:	f024 0403 	bic.w	r4, r4, #3
 80023d8:	42a0      	cmp	r0, r4
 80023da:	d10d      	bne.n	80023f8 <_malloc_r+0x98>
 80023dc:	6025      	str	r5, [r4, #0]
 80023de:	4630      	mov	r0, r6
 80023e0:	f000 f844 	bl	800246c <__malloc_unlock>
 80023e4:	f104 000b 	add.w	r0, r4, #11
 80023e8:	1d23      	adds	r3, r4, #4
 80023ea:	f020 0007 	bic.w	r0, r0, #7
 80023ee:	1ac3      	subs	r3, r0, r3
 80023f0:	d00e      	beq.n	8002410 <_malloc_r+0xb0>
 80023f2:	425a      	negs	r2, r3
 80023f4:	50e2      	str	r2, [r4, r3]
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	1a21      	subs	r1, r4, r0
 80023fa:	4630      	mov	r0, r6
 80023fc:	f000 f80e 	bl	800241c <_sbrk_r>
 8002400:	3001      	adds	r0, #1
 8002402:	d1eb      	bne.n	80023dc <_malloc_r+0x7c>
 8002404:	230c      	movs	r3, #12
 8002406:	6033      	str	r3, [r6, #0]
 8002408:	4630      	mov	r0, r6
 800240a:	f000 f82f 	bl	800246c <__malloc_unlock>
 800240e:	2000      	movs	r0, #0
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	bf00      	nop
 8002414:	200000a8 	.word	0x200000a8
 8002418:	200000a4 	.word	0x200000a4

0800241c <_sbrk_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4c06      	ldr	r4, [pc, #24]	; (8002438 <_sbrk_r+0x1c>)
 8002420:	2300      	movs	r3, #0
 8002422:	4605      	mov	r5, r0
 8002424:	4608      	mov	r0, r1
 8002426:	6023      	str	r3, [r4, #0]
 8002428:	f000 f856 	bl	80024d8 <_sbrk>
 800242c:	1c43      	adds	r3, r0, #1
 800242e:	d102      	bne.n	8002436 <_sbrk_r+0x1a>
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	b103      	cbz	r3, 8002436 <_sbrk_r+0x1a>
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	bd38      	pop	{r3, r4, r5, pc}
 8002438:	200009c4 	.word	0x200009c4

0800243c <strcat>:
 800243c:	b510      	push	{r4, lr}
 800243e:	4602      	mov	r2, r0
 8002440:	4613      	mov	r3, r2
 8002442:	3201      	adds	r2, #1
 8002444:	781c      	ldrb	r4, [r3, #0]
 8002446:	2c00      	cmp	r4, #0
 8002448:	d1fa      	bne.n	8002440 <strcat+0x4>
 800244a:	3b01      	subs	r3, #1
 800244c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002450:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002454:	2a00      	cmp	r2, #0
 8002456:	d1f9      	bne.n	800244c <strcat+0x10>
 8002458:	bd10      	pop	{r4, pc}

0800245a <strcpy>:
 800245a:	4603      	mov	r3, r0
 800245c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002460:	f803 2b01 	strb.w	r2, [r3], #1
 8002464:	2a00      	cmp	r2, #0
 8002466:	d1f9      	bne.n	800245c <strcpy+0x2>
 8002468:	4770      	bx	lr

0800246a <__malloc_lock>:
 800246a:	4770      	bx	lr

0800246c <__malloc_unlock>:
 800246c:	4770      	bx	lr
	...

08002470 <trunc>:
 8002470:	ec53 2b10 	vmov	r2, r3, d0
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800247a:	f2a5 31ff 	subw	r1, r5, #1023	; 0x3ff
 800247e:	2913      	cmp	r1, #19
 8002480:	ee10 6a10 	vmov	r6, s0
 8002484:	461c      	mov	r4, r3
 8002486:	dc0e      	bgt.n	80024a6 <trunc+0x36>
 8002488:	2900      	cmp	r1, #0
 800248a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800248e:	bfa3      	ittte	ge
 8002490:	4b10      	ldrge	r3, [pc, #64]	; (80024d4 <trunc+0x64>)
 8002492:	fa43 f101 	asrge.w	r1, r3, r1
 8002496:	438c      	bicge	r4, r1
 8002498:	2000      	movlt	r0, #0
 800249a:	bfb2      	itee	lt
 800249c:	4611      	movlt	r1, r2
 800249e:	2000      	movge	r0, #0
 80024a0:	ea44 0102 	orrge.w	r1, r4, r2
 80024a4:	e013      	b.n	80024ce <trunc+0x5e>
 80024a6:	2933      	cmp	r1, #51	; 0x33
 80024a8:	dd08      	ble.n	80024bc <trunc+0x4c>
 80024aa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80024ae:	ee10 0a10 	vmov	r0, s0
 80024b2:	4619      	mov	r1, r3
 80024b4:	d10b      	bne.n	80024ce <trunc+0x5e>
 80024b6:	f7fd fe95 	bl	80001e4 <__adddf3>
 80024ba:	e008      	b.n	80024ce <trunc+0x5e>
 80024bc:	4619      	mov	r1, r3
 80024be:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	fa23 f505 	lsr.w	r5, r3, r5
 80024ca:	ea26 0005 	bic.w	r0, r6, r5
 80024ce:	ec41 0b10 	vmov	d0, r0, r1
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	000fffff 	.word	0x000fffff

080024d8 <_sbrk>:
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <_sbrk+0x14>)
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	4602      	mov	r2, r0
 80024de:	b909      	cbnz	r1, 80024e4 <_sbrk+0xc>
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <_sbrk+0x18>)
 80024e2:	6019      	str	r1, [r3, #0]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	4402      	add	r2, r0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	4770      	bx	lr
 80024ec:	200000ac 	.word	0x200000ac
 80024f0:	200009c8 	.word	0x200009c8

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
