
home-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080011ec  080011ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08001294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          0000003c  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b0  200000b0  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000445c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e6d  00000000  00000000  00024500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d0  00000000  00000000  00025370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000438  00000000  00000000  00025840  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001c92  00000000  00000000  00025c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a28  00000000  00000000  0002790a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00029332  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000142c  00000000  00000000  000293b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011d4 	.word	0x080011d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080011d4 	.word	0x080011d4

080001c8 <SendAT>:


WIFI_AT* wifi_con;

void SendAT(char* str)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]


	while (*str) {
 80001d0:	e011      	b.n	80001f6 <SendAT+0x2e>
		while( !(USART2->SR & 0x00000040) );
 80001d2:	bf00      	nop
 80001d4:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <SendAT+0x40>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	b29b      	uxth	r3, r3
 80001da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0f8      	beq.n	80001d4 <SendAT+0xc>
		USART_SendData(USART2,(uint16_t)*str);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	4807      	ldr	r0, [pc, #28]	; (8000208 <SendAT+0x40>)
 80001ec:	f000 fc4c 	bl	8000a88 <USART_SendData>
		/* Increase string pointer */
		str++;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]

void SendAT(char* str)
{


	while (*str) {
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1e9      	bne.n	80001d2 <SendAT+0xa>
		str++;
	}



}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40004400 	.word	0x40004400

0800020c <ConfigureWifiUsart>:

}


void ConfigureWifiUsart(uint32_t baudrate)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08a      	sub	sp, #40	; 0x28
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]


	wifi_con = (WIFI_AT*)malloc(sizeof(WIFI_AT));
 8000214:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8000218:	f000 ff56 	bl	80010c8 <malloc>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <ConfigureWifiUsart+0xd4>)
 8000222:	601a      	str	r2, [r3, #0]
	wifi_con->rx_index = 0;
 8000224:	4b2e      	ldr	r3, [pc, #184]	; (80002e0 <ConfigureWifiUsart+0xd4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2200      	movs	r2, #0
 800022a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	wifi_con->new_response = 0;
 800022e:	4b2c      	ldr	r3, [pc, #176]	; (80002e0 <ConfigureWifiUsart+0xd4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	//enable the clocks for the GPIOB and the USART
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800023e:	f000 fda3 	bl	8000d88 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000242:	2101      	movs	r1, #1
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fd7f 	bl	8000d48 <RCC_AHB1PeriphClockCmd>

	//Initialise pins GPIOB 6 and GPIOB 7
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800024a:	230c      	movs	r3, #12
 800024c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; //we are setting the pin to be alternative function
 800024e:	2302      	movs	r3, #2
 8000250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000254:	2302      	movs	r3, #2
 8000256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800025a:	2300      	movs	r3, #0
 800025c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000260:	2301      	movs	r3, #1
 8000262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	f107 0320 	add.w	r3, r7, #32
 800026a:	4619      	mov	r1, r3
 800026c:	481d      	ldr	r0, [pc, #116]	; (80002e4 <ConfigureWifiUsart+0xd8>)
 800026e:	f000 fdcb 	bl	8000e08 <GPIO_Init>

	//Connect the TX and RX pins to their alternate function pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); //
 8000272:	2207      	movs	r2, #7
 8000274:	2102      	movs	r1, #2
 8000276:	481b      	ldr	r0, [pc, #108]	; (80002e4 <ConfigureWifiUsart+0xd8>)
 8000278:	f000 fe54 	bl	8000f24 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 800027c:	2207      	movs	r2, #7
 800027e:	2103      	movs	r1, #3
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <ConfigureWifiUsart+0xd8>)
 8000282:	f000 fe4f 	bl	8000f24 <GPIO_PinAFConfig>

	//configure USART
	USART_InitStruct.USART_BaudRate = baudrate;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800028a:	2300      	movs	r3, #0
 800028c:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 800028e:	2300      	movs	r3, #0
 8000290:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000292:	2300      	movs	r3, #0
 8000294:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000296:	2300      	movs	r3, #0
 8000298:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; //enable send and receive (Tx and Rx)
 800029a:	230c      	movs	r3, #12
 800029c:	837b      	strh	r3, [r7, #26]
	USART_Init(USART2, &USART_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4810      	ldr	r0, [pc, #64]	; (80002e8 <ConfigureWifiUsart+0xdc>)
 80002a6:	f000 fb15 	bl	80008d4 <USART_Init>

	//Enable the interupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f240 5125 	movw	r1, #1317	; 0x525
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <ConfigureWifiUsart+0xdc>)
 80002b2:	f000 fbfb 	bl	8000aac <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80002b6:	2326      	movs	r3, #38	; 0x26
 80002b8:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002c2:	2301      	movs	r3, #1
 80002c4:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fe74 	bl	8000fb8 <NVIC_Init>

	// finally this enables the complete USART2 peripheral
	USART_Cmd(USART2, ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <ConfigureWifiUsart+0xdc>)
 80002d4:	f000 fbb8 	bl	8000a48 <USART_Cmd>
}
 80002d8:	bf00      	nop
 80002da:	3728      	adds	r7, #40	; 0x28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	2000009c 	.word	0x2000009c
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40004400 	.word	0x40004400

080002ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4a16      	ldr	r2, [pc, #88]	; (800034c <SystemInit+0x60>)
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <SystemInit+0x60>)
 80002f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <SystemInit+0x64>)
 8000302:	4b13      	ldr	r3, [pc, #76]	; (8000350 <SystemInit+0x64>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <SystemInit+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <SystemInit+0x64>)
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <SystemInit+0x64>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800031c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000320:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <SystemInit+0x64>)
 8000324:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <SystemInit+0x68>)
 8000326:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000328:	4a09      	ldr	r2, [pc, #36]	; (8000350 <SystemInit+0x64>)
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <SystemInit+0x64>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000332:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <SystemInit+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800033a:	f000 f80d 	bl	8000358 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033e:	4b03      	ldr	r3, [pc, #12]	; (800034c <SystemInit+0x60>)
 8000340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000344:	609a      	str	r2, [r3, #8]
#endif
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	e000ed00 	.word	0xe000ed00
 8000350:	40023800 	.word	0x40023800
 8000354:	24003010 	.word	0x24003010

08000358 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	2300      	movs	r3, #0
 8000364:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000366:	4a36      	ldr	r2, [pc, #216]	; (8000440 <SetSysClock+0xe8>)
 8000368:	4b35      	ldr	r3, [pc, #212]	; (8000440 <SetSysClock+0xe8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000370:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000372:	4b33      	ldr	r3, [pc, #204]	; (8000440 <SetSysClock+0xe8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d103      	bne.n	8000390 <SetSysClock+0x38>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800038e:	d1f0      	bne.n	8000372 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <SetSysClock+0xe8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800039c:	2301      	movs	r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	e001      	b.n	80003a6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d142      	bne.n	8000432 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ac:	4a24      	ldr	r2, [pc, #144]	; (8000440 <SetSysClock+0xe8>)
 80003ae:	4b24      	ldr	r3, [pc, #144]	; (8000440 <SetSysClock+0xe8>)
 80003b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003b8:	4a22      	ldr	r2, [pc, #136]	; (8000444 <SetSysClock+0xec>)
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <SetSysClock+0xec>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003c2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003c4:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <SetSysClock+0xe8>)
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <SetSysClock+0xe8>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <SetSysClock+0xe8>)
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <SetSysClock+0xe8>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003d8:	4a19      	ldr	r2, [pc, #100]	; (8000440 <SetSysClock+0xe8>)
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <SetSysClock+0xe8>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003e2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <SetSysClock+0xe8>)
 80003e6:	4a18      	ldr	r2, [pc, #96]	; (8000448 <SetSysClock+0xf0>)
 80003e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <SetSysClock+0xe8>)
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <SetSysClock+0xe8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003f6:	bf00      	nop
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <SetSysClock+0xe8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f9      	beq.n	80003f8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <SetSysClock+0xf4>)
 8000406:	f240 7205 	movw	r2, #1797	; 0x705
 800040a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <SetSysClock+0xe8>)
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <SetSysClock+0xe8>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f023 0303 	bic.w	r3, r3, #3
 8000416:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000418:	4a09      	ldr	r2, [pc, #36]	; (8000440 <SetSysClock+0xe8>)
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <SetSysClock+0xe8>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000424:	bf00      	nop
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <SetSysClock+0xe8>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	f003 030c 	and.w	r3, r3, #12
 800042e:	2b08      	cmp	r3, #8
 8000430:	d1f9      	bne.n	8000426 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40023800 	.word	0x40023800
 8000444:	40007000 	.word	0x40007000
 8000448:	07405408 	.word	0x07405408
 800044c:	40023c00 	.word	0x40023c00

08000450 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop

08000460 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000464:	e7fe      	b.n	8000464 <HardFault_Handler+0x4>
 8000466:	bf00      	nop

08000468 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800046c:	e7fe      	b.n	800046c <MemManage_Handler+0x4>
 800046e:	bf00      	nop

08000470 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000474:	e7fe      	b.n	8000474 <BusFault_Handler+0x4>
 8000476:	bf00      	nop

08000478 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>
 800047e:	bf00      	nop

08000480 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	ms_at++;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <SysTick_Handler+0x40>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <SysTick_Handler+0x40>)
 80004bc:	6013      	str	r3, [r2, #0]

	if(ms_at > 40 && wifi_con->new_response == 0){
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <SysTick_Handler+0x40>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b28      	cmp	r3, #40	; 0x28
 80004c4:	d90a      	bls.n	80004dc <SysTick_Handler+0x2c>
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <SysTick_Handler+0x44>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d104      	bne.n	80004dc <SysTick_Handler+0x2c>
		wifi_con->new_response = 1;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <SysTick_Handler+0x44>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2201      	movs	r2, #1
 80004d8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	}

	ms1++;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SysTick_Handler+0x48>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <SysTick_Handler+0x48>)
 80004e4:	6013      	str	r3, [r2, #0]


}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	200000a4 	.word	0x200000a4
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	200000a0 	.word	0x200000a0

080004fc <USART1_IRQHandler>:


void USART1_IRQHandler(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	//check the type of interrupt to make sure we have received some data.
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8000502:	f240 5125 	movw	r1, #1317	; 0x525
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <USART1_IRQHandler+0x34>)
 8000508:	f000 fb18 	bl	8000b3c <USART_GetITStatus>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00a      	beq.n	8000528 <USART1_IRQHandler+0x2c>
		int8_t ch = USART1->DR; //Read the character that we have received
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <USART1_IRQHandler+0x34>)
 8000514:	889b      	ldrh	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
 8000518:	71fb      	strb	r3, [r7, #7]

		//ProcessSerialIn(ch);
		USART_SendData(USART1,(uint16_t)ch);
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	b29b      	uxth	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <USART1_IRQHandler+0x34>)
 8000524:	f000 fab0 	bl	8000a88 <USART_SendData>
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
		}

	} */

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40011000 	.word	0x40011000

08000534 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	//check the type of interrupt to make sure we have received some data.
	if( USART_GetITStatus(USART2, USART_IT_RXNE) ){
 800053a:	f240 5125 	movw	r1, #1317	; 0x525
 800053e:	4816      	ldr	r0, [pc, #88]	; (8000598 <USART2_IRQHandler+0x64>)
 8000540:	f000 fafc 	bl	8000b3c <USART_GetITStatus>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d022      	beq.n	8000590 <USART2_IRQHandler+0x5c>
		int8_t ch = USART2->DR; //Read the character that we have received
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <USART2_IRQHandler+0x64>)
 800054c:	889b      	ldrh	r3, [r3, #4]
 800054e:	b29b      	uxth	r3, r3
 8000550:	71fb      	strb	r3, [r7, #7]
		wifi_con->rsp[wifi_con->rx_index++] = ch;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <USART2_IRQHandler+0x68>)
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <USART2_IRQHandler+0x68>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800055e:	1c58      	adds	r0, r3, #1
 8000560:	f8c2 0400 	str.w	r0, [r2, #1024]	; 0x400
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	54ca      	strb	r2, [r1, r3]
		// reset to start of buffer
		if(wifi_con->rx_index >= 1024){
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <USART2_IRQHandler+0x68>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000574:	d304      	bcc.n	8000580 <USART2_IRQHandler+0x4c>
			wifi_con->rx_index = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <USART2_IRQHandler+0x68>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		}
		ms_at = 0;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <USART2_IRQHandler+0x6c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
		wifi_con->new_response = 0;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <USART2_IRQHandler+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404

	}


}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40004400 	.word	0x40004400
 800059c:	2000009c 	.word	0x2000009c
 80005a0:	200000a4 	.word	0x200000a4

080005a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a4:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80005e4 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005aa:	f000 b804 	b.w	80005b6 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 80005b0:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005b2:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005b4:	3104      	adds	r1, #4

080005b6 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80005ba:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005bc:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005be:	f4ff aff6 	bcc.w	80005ae <CopyDataInit>
  ldr  r2, =_sbss
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80005c4:	f000 b803 	b.w	80005ce <LoopFillZerobss>

080005c8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005c8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005ca:	f842 3b04 	str.w	r3, [r2], #4

080005ce <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80005d0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005d2:	f4ff aff9 	bcc.w	80005c8 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005d6:	f7ff fe89 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005da:	f000 fd4f 	bl	800107c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f000 f8df 	bl	80007a0 <main>
  bx  lr    
 80005e2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80005e8:	08001294 	.word	0x08001294
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f0:	20000074 	.word	0x20000074
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80005f4:	20000074 	.word	0x20000074
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005f8:	200000b0 	.word	0x200000b0

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	f7ff bffe 	b.w	80005fc <ADC_IRQHandler>

08000600 <ConfigureUsart>:
}



void ConfigureUsart(uint32_t baudrate)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	ser = (SERIAL_DATA*)malloc(sizeof(SERIAL_DATA));
 8000608:	f240 2006 	movw	r0, #518	; 0x206
 800060c:	f000 fd5c 	bl	80010c8 <malloc>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <ConfigureUsart+0xfc>)
 8000616:	601a      	str	r2, [r3, #0]
	ser->rx_index = 0;
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <ConfigureUsart+0xfc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	ser->rx_length = 255;
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <ConfigureUsart+0xfc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	ser->tx_length = 0;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <ConfigureUsart+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	ser->tx_index = 0;
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <ConfigureUsart+0xfc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	ser->stuffed = 0;
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <ConfigureUsart+0xfc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	ser->sync = 0;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <ConfigureUsart+0xfc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	//enable the clocks for the GPIOB and the USART
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000654:	2101      	movs	r1, #1
 8000656:	2010      	movs	r0, #16
 8000658:	f000 fbb6 	bl	8000dc8 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800065c:	2101      	movs	r1, #1
 800065e:	2002      	movs	r0, #2
 8000660:	f000 fb72 	bl	8000d48 <RCC_AHB1PeriphClockCmd>

	//Initialise pins GPIOB 6 and GPIOB 7
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000664:	23c0      	movs	r3, #192	; 0xc0
 8000666:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; //we are setting the pin to be alternative function
 8000668:	2302      	movs	r3, #2
 800066a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800066e:	2302      	movs	r3, #2
 8000670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000674:	2300      	movs	r3, #0
 8000676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800067a:	2301      	movs	r3, #1
 800067c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <ConfigureUsart+0x100>)
 8000688:	f000 fbbe 	bl	8000e08 <GPIO_Init>

	//Connect the TX and RX pins to their alternate function pins
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 800068c:	2207      	movs	r2, #7
 800068e:	2106      	movs	r1, #6
 8000690:	481b      	ldr	r0, [pc, #108]	; (8000700 <ConfigureUsart+0x100>)
 8000692:	f000 fc47 	bl	8000f24 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8000696:	2207      	movs	r2, #7
 8000698:	2107      	movs	r1, #7
 800069a:	4819      	ldr	r0, [pc, #100]	; (8000700 <ConfigureUsart+0x100>)
 800069c:	f000 fc42 	bl	8000f24 <GPIO_PinAFConfig>

	//configure USART
	USART_InitStruct.USART_BaudRate = baudrate;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80006a4:	2300      	movs	r3, #0
 80006a6:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 80006ac:	2300      	movs	r3, #0
 80006ae:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80006b0:	2300      	movs	r3, #0
 80006b2:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; //enable send and receive (Tx and Rx)
 80006b4:	230c      	movs	r3, #12
 80006b6:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4811      	ldr	r0, [pc, #68]	; (8000704 <ConfigureUsart+0x104>)
 80006c0:	f000 f908 	bl	80008d4 <USART_Init>

	//Enable the interupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f240 5125 	movw	r1, #1317	; 0x525
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <ConfigureUsart+0x104>)
 80006cc:	f000 f9ee 	bl	8000aac <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80006d0:	2325      	movs	r3, #37	; 0x25
 80006d2:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fc67 	bl	8000fb8 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 80006ea:	2101      	movs	r1, #1
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <ConfigureUsart+0x104>)
 80006ee:	f000 f9ab 	bl	8000a48 <USART_Cmd>
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	40020400 	.word	0x40020400
 8000704:	40011000 	.word	0x40011000

08000708 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	da0b      	bge.n	8000734 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <NVIC_SetPriority+0x4c>)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	3b04      	subs	r3, #4
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000732:	e009      	b.n	8000748 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000734:	4908      	ldr	r1, [pc, #32]	; (8000758 <NVIC_SetPriority+0x50>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	e000e100 	.word	0xe000e100

0800075c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076a:	d301      	bcc.n	8000770 <SysTick_Config+0x14>
 800076c:	2301      	movs	r3, #1
 800076e:	e011      	b.n	8000794 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000778:	3b01      	subs	r3, #1
 800077a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800077c:	210f      	movs	r1, #15
 800077e:	f04f 30ff 	mov.w	r0, #4294967295
 8000782:	f7ff ffc1 	bl	8000708 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <SysTick_Config+0x40>)
 800078e:	2207      	movs	r2, #7
 8000790:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	e000e010 	.word	0xe000e010

080007a0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
	int i = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
	uint32_t count;
	RCC_ClocksTypeDef RCC_Clocks;

	RCC_GetClocksFreq(&RCC_Clocks);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fa21 	bl	8000bf4 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <main+0xa4>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	099b      	lsrs	r3, r3, #6
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ffcd 	bl	800075c <SysTick_Config>

	ConfigureUsart(115200);
 80007c2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007c6:	f7ff ff1b 	bl	8000600 <ConfigureUsart>
	ConfigureWifiUsart(115200);
 80007ca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007ce:	f7ff fd1d 	bl	800020c <ConfigureWifiUsart>


	RunWifiCommand("AT\r");
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <main+0xa8>)
 80007d4:	f000 f848 	bl	8000868 <RunWifiCommand>

	DelayMs(5000);
 80007d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007dc:	f000 f864 	bl	80008a8 <DelayMs>

	RunWifiCommand("AT+CIPMUX=1\r");
 80007e0:	481a      	ldr	r0, [pc, #104]	; (800084c <main+0xac>)
 80007e2:	f000 f841 	bl	8000868 <RunWifiCommand>

	DelayMs(20);
 80007e6:	2014      	movs	r0, #20
 80007e8:	f000 f85e 	bl	80008a8 <DelayMs>




	DelayMs(2000);
 80007ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f0:	f000 f85a 	bl	80008a8 <DelayMs>
	RunWifiCommand("AT+CIFSR\r");
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <main+0xb0>)
 80007f6:	f000 f837 	bl	8000868 <RunWifiCommand>


  /* Infinite loop */
  count = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  while (1)
  {

	DelayMs(5000);
 80007fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000802:	f000 f851 	bl	80008a8 <DelayMs>
	RunWifiCommand("AT+CIPSTART=0,\"TCP\",\"192.168.1.72\",21\r");
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <main+0xb4>)
 8000808:	f000 f82e 	bl	8000868 <RunWifiCommand>

	DelayMs(5000);
 800080c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000810:	f000 f84a 	bl	80008a8 <DelayMs>

	RunWifiCommand("AT+CIPSEND=0,21\r");
 8000814:	4810      	ldr	r0, [pc, #64]	; (8000858 <main+0xb8>)
 8000816:	f000 f827 	bl	8000868 <RunWifiCommand>
	DelayMs(20);
 800081a:	2014      	movs	r0, #20
 800081c:	f000 f844 	bl	80008a8 <DelayMs>

	if(count == 1){
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d105      	bne.n	8000832 <main+0x92>
		RunWifiCommand("Hello from client A\r\n");
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <main+0xbc>)
 8000828:	f000 f81e 	bl	8000868 <RunWifiCommand>
		count = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e004      	b.n	800083c <main+0x9c>
	}else{
		RunWifiCommand("Hello from client B\r\n");
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <main+0xc0>)
 8000834:	f000 f818 	bl	8000868 <RunWifiCommand>
		count = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
	}

	RunWifiCommand("AT+CIPCLOSE=0\r");
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <main+0xc4>)
 800083e:	f000 f813 	bl	8000868 <RunWifiCommand>


  }
 8000842:	e7dc      	b.n	80007fe <main+0x5e>
 8000844:	10624dd3 	.word	0x10624dd3
 8000848:	080011ec 	.word	0x080011ec
 800084c:	080011f0 	.word	0x080011f0
 8000850:	08001200 	.word	0x08001200
 8000854:	0800120c 	.word	0x0800120c
 8000858:	08001234 	.word	0x08001234
 800085c:	08001248 	.word	0x08001248
 8000860:	08001260 	.word	0x08001260
 8000864:	08001278 	.word	0x08001278

08000868 <RunWifiCommand>:
}

WIFI_RSP RunWifiCommand(char* cmd)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	wifi_con->new_response = 0;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <RunWifiCommand+0x3c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	wifi_con->rx_index = 0;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <RunWifiCommand+0x3c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	SendAT(cmd);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fc9f 	bl	80001c8 <SendAT>
	while(wifi_con->new_response == 0);
 800088a:	bf00      	nop
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <RunWifiCommand+0x3c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f9      	beq.n	800088c <RunWifiCommand+0x24>

	return RSP_OK;
 8000898:	2300      	movs	r3, #0

}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000009c 	.word	0x2000009c

080008a8 <DelayMs>:

void DelayMs(uint32_t ms)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	ms1 = 0;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <DelayMs+0x28>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
	while(ms1 < ms);
 80008b6:	bf00      	nop
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <DelayMs+0x28>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3fa      	bcc.n	80008b8 <DelayMs+0x10>

}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200000a0 	.word	0x200000a0

080008d4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	8a1b      	ldrh	r3, [r3, #16]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	88db      	ldrh	r3, [r3, #6]
 8000902:	461a      	mov	r2, r3
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	4313      	orrs	r3, r2
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	b29a      	uxth	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	899b      	ldrh	r3, [r3, #12]
 8000916:	b29b      	uxth	r3, r3
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000920:	f023 030c 	bic.w	r3, r3, #12
 8000924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	889a      	ldrh	r2, [r3, #4]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	891b      	ldrh	r3, [r3, #8]
 800092e:	4313      	orrs	r3, r2
 8000930:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000936:	4313      	orrs	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	4313      	orrs	r3, r2
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	b29a      	uxth	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	8a9b      	ldrh	r3, [r3, #20]
 800094e:	b29b      	uxth	r3, r3
 8000950:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000958:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	899b      	ldrh	r3, [r3, #12]
 800095e:	461a      	mov	r2, r3
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	4313      	orrs	r3, r2
 8000964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	b29a      	uxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f93e 	bl	8000bf4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <USART_Init+0x168>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d003      	beq.n	8000988 <USART_Init+0xb4>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <USART_Init+0x16c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d102      	bne.n	800098e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	e001      	b.n	8000992 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	899b      	ldrh	r3, [r3, #12]
 8000996:	b29b      	uxth	r3, r3
 8000998:	b21b      	sxth	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	da0c      	bge.n	80009b8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800099e:	6a3a      	ldr	r2, [r7, #32]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009a      	lsls	r2, r3, #2
 80009a8:	441a      	add	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	e00b      	b.n	80009d0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009b8:	6a3a      	ldr	r2, [r7, #32]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009a      	lsls	r2, r3, #2
 80009c2:	441a      	add	r2, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <USART_Init+0x170>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	095b      	lsrs	r3, r3, #5
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	091b      	lsrs	r3, r3, #4
 80009e2:	2264      	movs	r2, #100	; 0x64
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
 80009e8:	69fa      	ldr	r2, [r7, #28]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	899b      	ldrh	r3, [r3, #12]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da0c      	bge.n	8000a14 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	3332      	adds	r3, #50	; 0x32
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <USART_Init+0x170>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
 8000a12:	e00b      	b.n	8000a2c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	3332      	adds	r3, #50	; 0x32
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <USART_Init+0x170>)
 8000a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	811a      	strh	r2, [r3, #8]
}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	40011400 	.word	0x40011400
 8000a44:	51eb851f 	.word	0x51eb851f

08000a48 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d008      	beq.n	8000a6c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	899b      	ldrh	r3, [r3, #12]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a6a:	e007      	b.n	8000a7c <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	899b      	ldrh	r3, [r3, #12]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	819a      	strh	r2, [r3, #12]
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	809a      	strh	r2, [r3, #4]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	f003 031f 	and.w	r3, r3, #31
 8000ae0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d103      	bne.n	8000afa <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	330c      	adds	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e009      	b.n	8000b0e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d103      	bne.n	8000b08 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3310      	adds	r3, #16
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e002      	b.n	8000b0e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3314      	adds	r3, #20
 8000b0c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b0e:	787b      	ldrb	r3, [r7, #1]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	6811      	ldr	r1, [r2, #0]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b20:	e006      	b.n	8000b30 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	6811      	ldr	r1, [r2, #0]
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
  }
}
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	095b      	lsrs	r3, r3, #5
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	f003 031f 	and.w	r3, r3, #31
 8000b68:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d107      	bne.n	8000b8a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	899b      	ldrh	r3, [r3, #12]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e011      	b.n	8000bae <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d107      	bne.n	8000ba0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	8a1b      	ldrh	r3, [r3, #16]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e006      	b.n	8000bae <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a9b      	ldrh	r3, [r3, #20]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4013      	ands	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <USART_GetITStatus+0xa4>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	74fb      	strb	r3, [r7, #19]
 8000bde:	e001      	b.n	8000be4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000be4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	2302      	movs	r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c14:	4b48      	ldr	r3, [pc, #288]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d007      	beq.n	8000c34 <RCC_GetClocksFreq+0x40>
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d009      	beq.n	8000c3c <RCC_GetClocksFreq+0x48>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d13f      	bne.n	8000cac <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a43      	ldr	r2, [pc, #268]	; (8000d3c <RCC_GetClocksFreq+0x148>)
 8000c30:	601a      	str	r2, [r3, #0]
      break;
 8000c32:	e03f      	b.n	8000cb4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <RCC_GetClocksFreq+0x14c>)
 8000c38:	601a      	str	r2, [r3, #0]
      break;
 8000c3a:	e03b      	b.n	8000cb4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c44:	0d9b      	lsrs	r3, r3, #22
 8000c46:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c48:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c50:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00d      	beq.n	8000c74 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c58:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <RCC_GetClocksFreq+0x14c>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c62:	6859      	ldr	r1, [r3, #4]
 8000c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c68:	400b      	ands	r3, r1
 8000c6a:	099b      	lsrs	r3, r3, #6
 8000c6c:	fb03 f302 	mul.w	r3, r3, r2
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e00c      	b.n	8000c8e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <RCC_GetClocksFreq+0x148>)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c7e:	6859      	ldr	r1, [r3, #4]
 8000c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c84:	400b      	ands	r3, r1
 8000c86:	099b      	lsrs	r3, r3, #6
 8000c88:	fb03 f302 	mul.w	r3, r3, r2
 8000c8c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	0c1b      	lsrs	r3, r3, #16
 8000c98:	3301      	adds	r3, #1
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
      break;
 8000caa:	e003      	b.n	8000cb4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <RCC_GetClocksFreq+0x148>)
 8000cb0:	601a      	str	r2, [r3, #0]
      break;
 8000cb2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cbc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <RCC_GetClocksFreq+0x150>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ce4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	0a9b      	lsrs	r3, r3, #10
 8000cea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <RCC_GetClocksFreq+0x150>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <RCC_GetClocksFreq+0x144>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	0b5b      	lsrs	r3, r3, #13
 8000d12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d14:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <RCC_GetClocksFreq+0x150>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	40da      	lsrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60da      	str	r2, [r3, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	00f42400 	.word	0x00f42400
 8000d40:	007a1200 	.word	0x007a1200
 8000d44:	20000000 	.word	0x20000000

08000d48 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d5a:	490a      	ldr	r1, [pc, #40]	; (8000d84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d66:	e006      	b.n	8000d76 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d68:	4906      	ldr	r1, [pc, #24]	; (8000d84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4013      	ands	r3, r2
 8000d74:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d9a:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000da6:	e006      	b.n	8000db6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000da8:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4013      	ands	r3, r2
 8000db4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000dda:	490a      	ldr	r1, [pc, #40]	; (8000e04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000de6:	e006      	b.n	8000df6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000de8:	4906      	ldr	r1, [pc, #24]	; (8000e04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <RCC_APB2PeriphClockCmd+0x3c>)
 8000dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4013      	ands	r3, r2
 8000df4:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e076      	b.n	8000f12 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e24:	2201      	movs	r2, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d165      	bne.n	8000f0c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2103      	movs	r1, #3
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d003      	beq.n	8000e7e <GPIO_Init+0x76>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d12e      	bne.n	8000edc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2103      	movs	r1, #3
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	799b      	ldrb	r3, [r3, #6]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	401a      	ands	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	79db      	ldrb	r3, [r3, #7]
 8000efc:	4619      	mov	r1, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d985      	bls.n	8000e24 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f3c:	787a      	ldrb	r2, [r7, #1]
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	08db      	lsrs	r3, r3, #3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	ea02 0103 	and.w	r1, r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f100 0208 	add.w	r2, r0, #8
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
 8000fc8:	230f      	movs	r3, #15
 8000fca:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	78db      	ldrb	r3, [r3, #3]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d038      	beq.n	8001046 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <NVIC_Init+0xbc>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f1c3 0304 	rsb	r3, r3, #4
 8000fe8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000fea:	7b7a      	ldrb	r2, [r7, #13]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	fa42 f303 	asr.w	r3, r2, r3
 8000ff2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	789a      	ldrb	r2, [r3, #2]
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	4013      	ands	r3, r2
 800100a:	b2da      	uxtb	r2, r3
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	4313      	orrs	r3, r2
 8001010:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <NVIC_Init+0xc0>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <NVIC_Init+0xc0>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001040:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001044:	e00f      	b.n	8001066 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <NVIC_Init+0xc0>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2201      	movs	r2, #1
 800105c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800105e:	f100 0320 	add.w	r3, r0, #32
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	e000e100 	.word	0xe000e100

0800107c <__libc_init_array>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <__libc_init_array+0x3c>)
 8001080:	4c0e      	ldr	r4, [pc, #56]	; (80010bc <__libc_init_array+0x40>)
 8001082:	1ae4      	subs	r4, r4, r3
 8001084:	10a4      	asrs	r4, r4, #2
 8001086:	2500      	movs	r5, #0
 8001088:	461e      	mov	r6, r3
 800108a:	42a5      	cmp	r5, r4
 800108c:	d004      	beq.n	8001098 <__libc_init_array+0x1c>
 800108e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001092:	4798      	blx	r3
 8001094:	3501      	adds	r5, #1
 8001096:	e7f8      	b.n	800108a <__libc_init_array+0xe>
 8001098:	f000 f89c 	bl	80011d4 <_init>
 800109c:	4c08      	ldr	r4, [pc, #32]	; (80010c0 <__libc_init_array+0x44>)
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <__libc_init_array+0x48>)
 80010a0:	1ae4      	subs	r4, r4, r3
 80010a2:	10a4      	asrs	r4, r4, #2
 80010a4:	2500      	movs	r5, #0
 80010a6:	461e      	mov	r6, r3
 80010a8:	42a5      	cmp	r5, r4
 80010aa:	d004      	beq.n	80010b6 <__libc_init_array+0x3a>
 80010ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010b0:	4798      	blx	r3
 80010b2:	3501      	adds	r5, #1
 80010b4:	e7f8      	b.n	80010a8 <__libc_init_array+0x2c>
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	0800128c 	.word	0x0800128c
 80010bc:	0800128c 	.word	0x0800128c
 80010c0:	08001290 	.word	0x08001290
 80010c4:	0800128c 	.word	0x0800128c

080010c8 <malloc>:
 80010c8:	4b02      	ldr	r3, [pc, #8]	; (80010d4 <malloc+0xc>)
 80010ca:	4601      	mov	r1, r0
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f000 b803 	b.w	80010d8 <_malloc_r>
 80010d2:	bf00      	nop
 80010d4:	20000070 	.word	0x20000070

080010d8 <_malloc_r>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	1ccd      	adds	r5, r1, #3
 80010dc:	f025 0503 	bic.w	r5, r5, #3
 80010e0:	3508      	adds	r5, #8
 80010e2:	2d0c      	cmp	r5, #12
 80010e4:	bf38      	it	cc
 80010e6:	250c      	movcc	r5, #12
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	4606      	mov	r6, r0
 80010ec:	db01      	blt.n	80010f2 <_malloc_r+0x1a>
 80010ee:	42a9      	cmp	r1, r5
 80010f0:	d902      	bls.n	80010f8 <_malloc_r+0x20>
 80010f2:	230c      	movs	r3, #12
 80010f4:	6033      	str	r3, [r6, #0]
 80010f6:	e046      	b.n	8001186 <_malloc_r+0xae>
 80010f8:	f000 f85c 	bl	80011b4 <__malloc_lock>
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <_malloc_r+0xb4>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4621      	mov	r1, r4
 8001104:	b1a1      	cbz	r1, 8001130 <_malloc_r+0x58>
 8001106:	680b      	ldr	r3, [r1, #0]
 8001108:	1b5b      	subs	r3, r3, r5
 800110a:	d40e      	bmi.n	800112a <_malloc_r+0x52>
 800110c:	2b0b      	cmp	r3, #11
 800110e:	d903      	bls.n	8001118 <_malloc_r+0x40>
 8001110:	600b      	str	r3, [r1, #0]
 8001112:	18cc      	adds	r4, r1, r3
 8001114:	50cd      	str	r5, [r1, r3]
 8001116:	e01e      	b.n	8001156 <_malloc_r+0x7e>
 8001118:	428c      	cmp	r4, r1
 800111a:	bf0d      	iteet	eq
 800111c:	6863      	ldreq	r3, [r4, #4]
 800111e:	684b      	ldrne	r3, [r1, #4]
 8001120:	6063      	strne	r3, [r4, #4]
 8001122:	6013      	streq	r3, [r2, #0]
 8001124:	bf18      	it	ne
 8001126:	460c      	movne	r4, r1
 8001128:	e015      	b.n	8001156 <_malloc_r+0x7e>
 800112a:	460c      	mov	r4, r1
 800112c:	6849      	ldr	r1, [r1, #4]
 800112e:	e7e9      	b.n	8001104 <_malloc_r+0x2c>
 8001130:	4c17      	ldr	r4, [pc, #92]	; (8001190 <_malloc_r+0xb8>)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	b91b      	cbnz	r3, 800113e <_malloc_r+0x66>
 8001136:	4630      	mov	r0, r6
 8001138:	f000 f82c 	bl	8001194 <_sbrk_r>
 800113c:	6020      	str	r0, [r4, #0]
 800113e:	4629      	mov	r1, r5
 8001140:	4630      	mov	r0, r6
 8001142:	f000 f827 	bl	8001194 <_sbrk_r>
 8001146:	1c43      	adds	r3, r0, #1
 8001148:	d018      	beq.n	800117c <_malloc_r+0xa4>
 800114a:	1cc4      	adds	r4, r0, #3
 800114c:	f024 0403 	bic.w	r4, r4, #3
 8001150:	42a0      	cmp	r0, r4
 8001152:	d10d      	bne.n	8001170 <_malloc_r+0x98>
 8001154:	6025      	str	r5, [r4, #0]
 8001156:	4630      	mov	r0, r6
 8001158:	f000 f82d 	bl	80011b6 <__malloc_unlock>
 800115c:	f104 000b 	add.w	r0, r4, #11
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	f020 0007 	bic.w	r0, r0, #7
 8001166:	1ac3      	subs	r3, r0, r3
 8001168:	d00e      	beq.n	8001188 <_malloc_r+0xb0>
 800116a:	425a      	negs	r2, r3
 800116c:	50e2      	str	r2, [r4, r3]
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	1a21      	subs	r1, r4, r0
 8001172:	4630      	mov	r0, r6
 8001174:	f000 f80e 	bl	8001194 <_sbrk_r>
 8001178:	3001      	adds	r0, #1
 800117a:	d1eb      	bne.n	8001154 <_malloc_r+0x7c>
 800117c:	230c      	movs	r3, #12
 800117e:	6033      	str	r3, [r6, #0]
 8001180:	4630      	mov	r0, r6
 8001182:	f000 f818 	bl	80011b6 <__malloc_unlock>
 8001186:	2000      	movs	r0, #0
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	bf00      	nop
 800118c:	20000094 	.word	0x20000094
 8001190:	20000090 	.word	0x20000090

08001194 <_sbrk_r>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4c06      	ldr	r4, [pc, #24]	; (80011b0 <_sbrk_r+0x1c>)
 8001198:	2300      	movs	r3, #0
 800119a:	4605      	mov	r5, r0
 800119c:	4608      	mov	r0, r1
 800119e:	6023      	str	r3, [r4, #0]
 80011a0:	f000 f80a 	bl	80011b8 <_sbrk>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d102      	bne.n	80011ae <_sbrk_r+0x1a>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	b103      	cbz	r3, 80011ae <_sbrk_r+0x1a>
 80011ac:	602b      	str	r3, [r5, #0]
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	200000ac 	.word	0x200000ac

080011b4 <__malloc_lock>:
 80011b4:	4770      	bx	lr

080011b6 <__malloc_unlock>:
 80011b6:	4770      	bx	lr

080011b8 <_sbrk>:
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <_sbrk+0x14>)
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	4602      	mov	r2, r0
 80011be:	b909      	cbnz	r1, 80011c4 <_sbrk+0xc>
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <_sbrk+0x18>)
 80011c2:	6019      	str	r1, [r3, #0]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	4402      	add	r2, r0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	4770      	bx	lr
 80011cc:	20000098 	.word	0x20000098
 80011d0:	200000b0 	.word	0x200000b0

080011d4 <_init>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	bf00      	nop
 80011d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011da:	bc08      	pop	{r3}
 80011dc:	469e      	mov	lr, r3
 80011de:	4770      	bx	lr

080011e0 <_fini>:
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	bf00      	nop
 80011e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e6:	bc08      	pop	{r3}
 80011e8:	469e      	mov	lr, r3
 80011ea:	4770      	bx	lr
